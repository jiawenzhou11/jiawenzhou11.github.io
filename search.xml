<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大数据与优化方法——袁亚湘院士讲座</title>
      <link href="/post/2e1b8a1a.html"/>
      <url>/post/2e1b8a1a.html</url>
      
        <content type="html"><![CDATA[<h1 id="袁亚湘院士介绍"><a href="#袁亚湘院士介绍" class="headerlink" title="袁亚湘院士介绍"></a>袁亚湘院士介绍</h1><p><a href="https://baike.baidu.com/item/%E8%A2%81%E4%BA%9A%E6%B9%98" target="_blank" rel="noopener">袁亚湘</a>，数学家，中国科学院院士，长期从事计算数学、应用数学、运筹学等领域研究工作，他在非线性规划方面的研究成果被国际上命名为“袁氏引理”。在讲座前播放的介绍视频，讲述袁亚湘和他母亲的故事，有幸在腾讯视频找到了链接：<a href="https://v.qq.com/x/page/m0305v33cuw.html" target="_blank" rel="noopener"><br>袁亚湘：拳拳母爱，点燃“科学之光”</a>。</p><h1 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h1><p>随着科技水平的不断提高，我们生产出来的数据也越来越多，如文字、图片、视频等，如何从这些庞大的数据中寻找到有价值的信息，是分析大数据的原因。袁老师提到，我们之所以研究大数据，其实也和研究其他问题一样，是由<strong>应用驱动</strong>的，它能够解决一些现有的问题。例如，通过架设在城市交通道路上的摄像头，使用计算机视觉技术，可以分析在某时刻通过的某辆车，车型（汽车、摩托车、自行车等）、车牌号等信息，分析整个城市的相关数据，可以很好地预测高峰期、拥堵程度，解决交通拥堵问题。</p><p>对于各种各样的数据，我们关心的问题主要有：数据的<strong>规律</strong>、<strong>分类</strong>、<strong>预测</strong>。</p><p>数据处理的难点在于现实生活中的数据都是带有<strong>噪声</strong>的、<strong>缺失</strong>的、<strong>不完整</strong>的或是<strong>数据在线（不断到达）</strong>，要对数据进行预处理，进行去噪、补全等操作。</p><p>深度学习网络相当于是多层复合函数的嵌套。</p><p><strong>连续函数</strong>的分类问题称为<strong>回归问题</strong>，<strong>离散函数</strong>的分类问题有<strong>二分类</strong>和<strong>多分类</strong>问题。</p><p>我们所掌握的函数类型其实是很少的，而现实生活复杂多变，难以用函数去描述，大数据为我们提供了用已有的经验知识去推断未有知识的途径。如果一件事情还未发生，我们已经知道了它发生的结果，那么就能更好地做出选择，所以研究大数据有很强的现实意义。</p><h1 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h1><p><a href="https://zh.wikipedia.org/wiki/Netflix" target="_blank" rel="noopener">Netflix</a>视频点播公司曾经研究过这样一个问题，假设它拥有<code>500,000</code>用户和<code>20,000</code>部影片（讲座时的真实数据没有记录，这是大概数据），每个用户看完电影会对电影打分，从1分到5分。如果每个用户对每部电影都有一个评分（这显然是不可能的），那么我们将会得到一个<code>500000*20000</code>的拥有100亿个元素的矩阵，这是一个很庞大的数据，Netflix收集到的数据约为1亿，如何用这1亿的已知数据去补全这个100亿元素的矩阵，是需要去研究的问题。如果补全了这个矩阵，那么便可以给用户推荐他们喜欢的电影，关于Netflix推荐系统的简单介绍可以查看<a href="https://help.netflix.com/zh-cn/node/100639" target="_blank" rel="noopener">Netflix佳片推荐系统</a>。</p><p>随后，袁老师简单介绍了BB步长、交替方向、可分离问题、并行计算、升维度、子空间技术、随机坐标方向等。</p><h1 id="我的体会"><a href="#我的体会" class="headerlink" title="我的体会"></a>我的体会</h1><p>第一次参加学术类的讲座，大师真的是大师，将复杂的数学问题用现实类比讲述得生动形象，令人由衷地佩服。给我印象深刻的几点做一下记录：</p><ul><li>视频中提到，袁老师的母亲为了让他安心出国留学，竟说出“恨不得自己去死以打消儿子对家里的放不下”，实在是让人震撼，伟大的母亲！</li><li>一件事还未发生前，你已经知道了它发生的结果，这是非常了不起的。由于我对于周易有很大的兴趣，尤其是有一段时间沉迷于研究其占卜的功能，所以这句话对我的印象很是深刻，建立在科学上的预测更加准确，也更为迷人。</li><li>讲座上提到了数学家<a href="https://zh.wikipedia.org/wiki/%E9%99%B6%E5%93%B2%E8%BD%A9" target="_blank" rel="noopener">陶哲轩</a>和他的一个研究成果，矩阵的0范数求解是一个NP难问题，但是在特定条件下可以等价为1范数求解(大概是这个方面的问题，可能表述上有些问题)。袁老师借此数学问题类比，谈到共产主义或许难以实现，而在特定条件的限制下，中国特色的社会主义道路是行得通的，下面会谈到袁老师提到的科学家的浪漫主义情怀。这样的类比也让我有了更多的思考，什么是真正的自由，无有任何约束就是自由吗？显然不是的，只有在一定约束下，我们才能获得真正的自由，这约束是什么，对于不同的国家有不同的解释，并无高下好坏之分。</li><li>科学家的浪漫主义情怀：袁老师提到科学家一定要有浪漫主义情怀，作为数学家，他没有完全沉浸在自己的世界里。讲座里提到，他给自己的母亲讲解为什么点到直线的最短距离是垂线，他说，让村长吹气球，这个气球很大，直到气球最外面的点接触到公路的时候，那这条路就是村长到公路的最短距离。然后，借由这个例子，他讲到压缩感知的问题，就假设这是一个菱形的气球，那么这个气球最先到达直线的点一定在坐标轴上。</li><li>讲座总结：听学术讲座可能不会对学术问题有实际的改变，但是大师的魅力却能够使我们在思想上有翻天覆地的改变。正如特鲁多医生所总结的“偶尔治愈，常常帮助，总是安慰”，参加学术讲座或许也可以这样总结：偶尔收获，常常记录，总是参加。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 优化方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据类型浅析</title>
      <link href="/post/1e1e2e9c.html"/>
      <url>/post/1e1e2e9c.html</url>
      
        <content type="html"><![CDATA[<h1 id="技术分类"><a href="#技术分类" class="headerlink" title="技术分类"></a>技术分类</h1><p>这是第一篇技术博文，开始做一个技术搬砖工，尽量搬别人的砖，盖自己的楼，哈哈哈。</p><h1 id="Python数据类型"><a href="#Python数据类型" class="headerlink" title="Python数据类型"></a>Python数据类型</h1><p>Python中共有六种数据类型，分别是：<code>number</code>(数值)、<code>string</code>(字符)、<code>lis</code>t(列表)、<code>tuple</code>(元组)、<code>set</code>(集合)、<code>dictionary</code>(字典)。可以分为两类：</p><ul><li>不可变数据：<code>number</code>、<code>string</code>、<code>tuple</code></li><li>可变数据：<code>set</code>、<code>list</code>、<code>dictionary</code></li></ul><h2 id="不可变数据"><a href="#不可变数据" class="headerlink" title="不可变数据"></a>不可变数据</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p>数字在现实生活中是非常普遍的，当然也是现代科学的基础，编程必备的数据类型。Python中的数值支持int、float、bool、complex，定义如下：</p><pre class=" language-Python"><code class="language-Python">a = 1b = 3.1415c = Trued = 3 + 4j</code></pre><p>从底层的角度来说，数字最终都将会以二进制的表示形式存储，例如，<code>9</code>-&gt;<code>1001</code>，这里的<code>1001</code>的每一位其实就代表内存中一个实际的物理上的存储单元，可以直接在硬件上进行数值的运算。下面会比较string类型的存储，注意区分。</p><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>除了数字，字符也是现实生活中非常普遍的数据，不论是中文还是英文或者其他任何语言。Python中的string变量定义时需要用'或"括起来。</p><pre class=" language-Python"><code class="language-Python">s1 = 'Gavin's2 = "hello,Gavin"word = 'Python'</code></pre><p>理论上只要string足够长，可以存储任意的<strong>文字数据</strong>，所有文字都可以表示为string。常用的字符编码有<code>ASCII码</code>、<code>Unicode编码</code>，将字符用一个唯一与之对应的数字代表，那么字符就可以存储在内存中。从<strong>物理层面</strong>看，这里的string和上面的number并无差异，都是<code>01</code>数据的组合，但是在解码时，可以通过<strong>编码表</strong>把string还原成字符，而number数据则不需处理。</p><h3 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h3><p>元组的元素用小括号<code>()</code>括起来，元素之间用<code>，</code>隔开，元组的元素不能修改。</p><pre class=" language-Python"><code class="language-Python">tup = ('abc',521,3.14,True,'Hello')</code></pre><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>列表的元素用方括号<code>[]</code>括起来，元素之间用<code>，</code>隔开，列表的元素可以改变。列表类似于C语言中的数组，但是它并没有要求元素为同一类型，元素可以是任意的Python数据类型，甚至可以是list本身。</p><pre class=" language-Python"><code class="language-Python">lis = ['abc',521,3.14,True,'Hello']</code></pre><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>集合的元素使用大括号<code>{}</code>括起来，元素之间用<code>，</code>隔开，集合的元素可以改变，集合的元素不能重复，定义时重复的元素会被剔除。</p><pre class=" language-Python"><code class="language-Python">student = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'}</code></pre><h3 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h3><p>字典的元素使用大括号<code>{}</code>括起来，每个元素(value)有一个对应的键值(key)，字典的元素可以改变，字典是无序的。字典的元素通过键值来读取，所以键值不能重复，必须是唯一的。</p><pre class=" language-Python"><code class="language-Python">tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}</code></pre><h3 id="对比四种数据类型"><a href="#对比四种数据类型" class="headerlink" title="对比四种数据类型"></a>对比四种数据类型</h3><p>number和string很好理解和记忆，但后面的四种类型非常相似，这里列个表来对比一下</p><table><thead><tr><th>list</th><th>tuple</th><th>set</th><th>dictionary</th></tr></thead><tbody><tr><td>可变</td><td>不可变</td><td>可变</td><td>可变</td></tr><tr><td>有序</td><td>有序</td><td>无序</td><td>无序</td></tr><tr><td>[ ]</td><td>( )</td><td>{ }</td><td>{ }</td></tr><tr><td>数组的加强版</td><td>不可变的list</td><td>元素不重复的list</td><td>快速查找元素的list</td></tr></tbody></table><h4 id="胡言胡语话数据类型"><a href="#胡言胡语话数据类型" class="headerlink" title="胡言胡语话数据类型"></a>胡言胡语话数据类型</h4><ul><li><code>list</code>：这四种类型中最常用的就是list，list就好比是一列人排队买包子，是<strong>有序</strong>的，买完了或者不想买了，人就走了，还有人想买就加入排队，是<strong>可变</strong>的。</li><li><code>tuple</code>：不能改变的list，tuple就好比是这个字母表，第一个是A，第二个是B······，它<strong>有序</strong>，而且<strong>不可变</strong>，可以用来存放一些重要的序列数据，用于查询。</li><li><code>set</code>：无序的、元素唯一的list，set就好比是一群人凑热闹看戏，这里头没有完全相同的两个人，元素是<strong>唯一</strong>的，而且是<strong>无序</strong>的。</li><li><code>dictionary</code>：无序的list，字典的引入主要是为了解决大的list元素的查找问题，这个名字也起的很有灵性。就好比汉语字典，让你去查找一个字，如果没有页码或者拼音排序，你要一个一个地找，效率很低，而字典提供的就是每个字对应的页码，也就是所谓的key，查询对应的value。</li></ul><h2 id="可变与不可变数据"><a href="#可变与不可变数据" class="headerlink" title="可变与不可变数据"></a>可变与不可变数据</h2><p>像Linux系统著名的“一切皆文件”一样，Python也有这么一句著名的话：“一切皆对象”。Python中的数据也是对象，可以通过<code>type()</code>函数查看数据的类，也可以说成是可变对象与不可变对象。</p><ul><li>对于代码<code>a = 10</code>来说，<code>a</code>只是对于数据<code>10</code>的一个引用，真正存储的对象是<code>10</code>这个数据。对于数值来说，所谓的不可变是指数据<code>10</code>所存在的内存数据不会改变，当执行<code>a = a + 1</code>这条程序时，并不会改变原来内存数据<code>10</code>,而是会新开辟一块内存，存储计算的结果<code>11</code>，并将<code>a</code>指向<code>11</code>这个数据的内存地址。可以使用<code>id()</code>来验证这一结果。</li></ul><pre class=" language-Python"><code class="language-Python">a = 10print(id(a))a = a + 1print(id(a))</code></pre><ul><li>对于可变对象如list来说，代码<code>list = ['abc',123]</code>创建了列表list，如果对列表进行扩充、修改等操作，则原有的list会被改变，即原来的数据会丢失，只保留新的数据。如对于代码<code>list2 = list.append(456)</code>来说，<code>list</code>的内容和<code>list2</code>一样，都是追加元素<code>456</code>后的列表。</li></ul><p>参考资料：<a href="https://www.runoob.com/python3/python3-data-type.html" target="_blank" rel="noopener">菜鸟教程</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无用之学——哲学</title>
      <link href="/post/d27a988.html"/>
      <url>/post/d27a988.html</url>
      
        <content type="html"><![CDATA[<h1 id="与哲学的结缘"><a href="#与哲学的结缘" class="headerlink" title="与哲学的结缘"></a>与哲学的结缘</h1><p>我从初中开始就喜欢读书，读各种各样的书，未解之谜，科普，文学等等，可能是因为我的小小世界里没有一个榜样，父母和亲戚朋友大都是农民出身，人生没有任何可以参考的模板，不知道该如何去践行自己的人生，知道如今仍旧如此。</p><p>说到与哲学的结缘，就不得不提我非常敬重的语文老师。在他的引导下，我喜欢上了中国近现代的一些非常有思想的作家，如余华、史铁生、周国平等，看了许多他们的书；同时也了解和喜欢上电影，这两者都会对我原有的思想产生一些改变，这种观念的改变和思想的火花让我兴奋不已。印象非常深刻的是，史铁生先生提到过这样的思想，一个人真正的出生不是从他呱呱坠地开始的，而是从他对这个世界产生的第一个认识和记忆开始。我努力搜索自己的大脑，企图找到那个最原始的记忆；有很多印象较为深刻的片段，但却分不清哪个是第一个。现在想想，这些片段大多是幼儿园的记忆，而且大部分是害怕、尴尬、失落、沮丧的，也有少数的开心，或许就是这些片段奠定了我此后十几年的悲情基调，不知道在心理学上是否有理论支撑。</p><h1 id="近代哲学与古代哲学"><a href="#近代哲学与古代哲学" class="headerlink" title="近代哲学与古代哲学"></a>近代哲学与古代哲学</h1><p>史铁生先生是我非常喜欢和敬重的作家，他的作品本身极富思想。在《务虚笔记》中，他使用英文字母代替人名，并不着意塑造人物，而是将重点放在了事物本身，其中艰难的抉择、凄美的爱情读来让人如同身临其境，有人说这些故事源自于他的生活，但不论是否和他自身相关，这些故事仍然在发生着，在这片土地不为人知的角角落落演绎着。后来我模仿先生的风格，写了一篇文章发表在空间里，源于生活又对现实对象的模糊化，使我能够真实地表达自己的感情，而不去伤害故事的主人公。</p><p>读的周国平先生的书多是一些随笔集，虽记得有长篇《我和妞妞》，但始终没有读过。这些随笔让我能够另一个角度去考虑问题，从一个无法从我自身产生的角度，这种思考带来的是对于任何匪夷所思的事情的合理解释，即包容各种各样的思想和选择。后来，我常常想，很多事情从每个主人公的角度来讲，都有他这么做的理由，但很多个看似合理的理由结合在一起却酿成了一桩桩悲剧。我们使用法律、道德等各种规则去限制的正是这种悲剧的产生，但却永远无法消灭悲剧，只能用爱去渐渐地弥合悲剧造成的伤口。</p><p>对于余华先生，和我最喜欢的导演贾樟柯一样， 是一个热衷于展示社会黑暗，批判社会的人，从某种程度上来说，我性格里的对于现实的不满也许多少来自这里。让我看完震撼而且是为数不多的读过两遍以上的作品《第七天》，用魔幻现实主义的手法，揭露了中国当代各种各样的丑恶现象，错综复杂的人物最终又完美地相遇在一起，从文学造诣和批判现实的角度来说，都是不可多得的好作品。</p><p>除了这些近现代作家，我对于传统的四书五经也有很大兴趣，他们对我来说像是一本本魔法书，总觉得能够让我变得强大，至少变得与众不同，因为没什么人看这些。在这种有些奇怪的心理作用下，我先后看过老子、庄子、诗经、周易、大学、鬼谷子、孙子兵法等，其中，老子、诗经、周易看得较为仔细深入，甚至在早读背诵老子；周易也差不多浏览过一遍，看了很多台湾师范大学曾仕强教授的视频，对占卜这种预知未来的能力很是感兴趣，但重要的还是周易讲的人生哲理；诗经也大概浏览过一遍，说实话看不太懂，只是偶尔觉得有几句非常能表达自己的意思，于是记下来，写在签名上，故弄玄虚，认为别人看不懂。</p><h1 id="我的哲学思想"><a href="#我的哲学思想" class="headerlink" title="我的哲学思想"></a>我的哲学思想</h1><p>我的那位老师曾说，年轻的时候要读儒学，讲究积极入世，建功立业；年老了读道，逐渐放下世界的纷扰，讲究无为而治。而我恰恰相反，我喜欢道家思想的自由、无拘无束，像庄子那般逍遥。但道家思想并没有使我变得自由，反倒是使我害怕开始一件事，事情本身变成了对自由的侵犯，也反感任何强制参加的活动，反感被安排的生活，同时自己又不去安排自己的生活。这种没有什么规划的人生可取吗？我要慢慢改变这种思想了，也不是说它不对，但毕竟不能适应这个时代的要求。</p><h1 id="后来的生活"><a href="#后来的生活" class="headerlink" title="后来的生活"></a>后来的生活</h1><p>上了大学之后，有了游戏和其他更多的放松又刺激的活动，读书渐渐少了很多，更多地去看一些新闻自媒体。对于负面的事情，义愤填膺，打抱不平，给自己的生活无故平添了很多烦恼；对于正面的新闻，觉得被人群统治了自己的思想，跟风刷屏。真正能够参与其中，产生影响的又有多少呢？大学之后，思想的深度没有明显的变化，只有阅历的增加，人情世故的磨练留下的痕迹；我不禁反问自己，我真的成长了吗，还是只是重复的生活？无法回答，怯于回答。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 哲学与心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我与哲学 </tag>
            
            <tag> 道家思想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青年在选择职业时的考虑</title>
      <link href="/post/c27c761c.html"/>
      <url>/post/c27c761c.html</url>
      
        <content type="html"><![CDATA[<h1 id="青年在选择职业时的考虑"><a href="#青年在选择职业时的考虑" class="headerlink" title="青年在选择职业时的考虑"></a>青年在选择职业时的考虑</h1><p>自然本身给动物规定了它应该遵守的活动范围，动物也就安分地在这个范围内活动，而不试图越出这个范围，甚至不考虑有其它范围存在。神也给人指定了共同的目标──使人类和他自己趋于高尚，但是，神要人自己去寻找可以达到这个目标的手段；神让人在社会上选择一个最适合于他、最能使他和社会变得高尚的地位。</p><p>这种选择是人比其它创造物远为优越的地方，但同时也是可能毁灭人的一生、破坏他的一切计划并使他陷于不幸的行为。因此，认真地权衡这种选择，无疑是开始走上生活道路而又不愿在最重要的事情上听天由命的青年的首要责任。</p><p>每个人眼前都有一个目标，这个目标至少在他本人看来是伟大的，而且如果最深刻的信念，即内心深处的声音，认为这个目标是伟大的，那它实际上也是伟大的，因为神决不会使世人完全没有引导者；神轻声地但坚定地作启示。</p><p>但是，这声音很容易被淹没；我们认为是热情的东西可能倏忽而生，同样可能倏忽而逝。也许，我们的幻想蓦然迸发，我们的感情激动起来，我们的眼前浮想联翩，我们狂热地追求我们以为是神本身给我们指出的目标；但是，我们梦寐以求的东西很快就使我们厌恶，于是，我们便感到自己的整个存在遭到了毁灭。</p><p>因此，我们应当认真考虑：我们对所选择的职业是不是真的怀有热情？发自我们内心的声音是不是同意选择这种职业？我们的热情是不是一种迷误？我们认为是神的召唤的东西是不是一种自我欺骗？不过，如果不对热情的来源本身加以探究，我们又怎么能认清这一切呢？</p><p>伟大的东西是闪光的，闪光会激发虚荣心，虚荣心容易使人产生热情或者一种我们觉得是热情的东西；但是，被名利迷住了心窍的人，理性是无法加以约束的，于是他一头栽进那不可抗拒的欲念召唤他去的地方；他的职业已经不再是由他自己选择，而是由偶然机会和假象去决定了。</p><p>我们的使命决不是求得一个最足以炫耀的职业，因为它不是那种可能由我们长期从事，但始终不会使我们感到厌倦、始终不会使我们劲头低落、始终不会使我们的热情冷却的职业，相反，我们很快就会觉得，我们的愿望没有得到满足，我们的理想没有实现，我们就将怨天尤人。</p><p>但是，不仅虚荣心能够引起对某种职业的突然的热情，而且我们也许会用自己的幻想把这种职业美化，把它美化成生活所能提供的至高无上的东西。我们没有仔细分析它，没有衡量它的全部分量，即它加在我们肩上的重大责任；我们只是从远处观察它，而从远处观察是靠不住的。</p><p>在这里，我们自己的理性不能给我们充当顾问，因为当它被感情欺骗，受幻想蒙蔽时，它既不依靠经验，也不依靠更深入的观察。然而，我们的目光应该投向谁呢？当我们丧失理性的时候，谁来支持我们呢？</p><p>是我们的父母，他们走过了漫长的生活道路，饱尝了人世辛酸。──我们的心这样提醒我们。<br>如果我们经过冷静的考察，认清了所选择的职业的全部分量，了解它的困难以后，仍然对它充满热情，仍然爱它，觉得自己适合于它，那时我们就可以选择它，那时我们既不会受热情的欺骗，也不会仓促从事。</p><p>但是，我们并不总是能够选择我们自认为适合的职业；我们在社会上的关系，还在我们有能力决定它们以前就已经在某种程度上开始确立了。</p><p>我们的体质常常威胁我们，可是任何人也不敢藐视它的权利。</p><p>诚然，我们能够超越体质的限制，但这么一来，我们也就垮得更快；在这种情况下，我们就是冒险把大厦建筑在残破的废墟上，我们的一生也就变成一场精神原则和肉体原则之间的不幸的斗争。但是，一个不能克服自身相互斗争的因素的人，又怎能抗御生活的猛烈冲击，怎能安静地从事活动呢？然而只有从安静中才能产生出伟大壮丽的事业，安静是唯一能生长出成熟果实的土壤。</p><p>尽管我们由于体质不适合我们的职业，不能持久地工作，而且很少能够愉快地工作，但是，为了克尽职守而牺牲自己幸福的思想激励着我们不顾体弱去努力工作。如果我们选择了力不胜任的职业，那么我们决不能把它做好，我们很快就会自愧无能，就会感到自己是无用的人，是不能完成自己使命的社会成员。由此产生的最自然的结果就是自卑。还有比这更痛苦的感情吗？还有比这更难于靠外界的各种赐予来补偿的感情吗？自卑是一条毒蛇，它无尽无休地搅扰、啃啮我们的胸膛，吮吸我们心中滋润生命的血液，注入厌世和绝望的毒液。</p><p>如果我们错误地估计了自己的能力，以为能够胜任经过较为仔细的考虑而选定的职业，那么这种错误将使我们受到惩罚。即使不受到外界的指责，我们也会感到比外界指责更为可怕的痛苦。</p><p>如果我们把这一切都考虑过了，如果我们的生活条件容许我们选择任何一种职业，那么我们就可以选择一种使我们获得最高尊严的职业，一种建立在我们深信其正确的思想上的职业，一种能给我们提供最广阔的场所来为人类工作，并使我们自己不断接近共同目标即臻于完美境界的职业，而对于这个共同目标来说，任何职业都只不过是一种手段。</p><p>尊严是最能使人高尚、使他的活动和他的一切努力具有更加崇高品质的东西，是使他无可非议、受到众人钦佩并高出于众人之上的东西。</p><p>但是，能给人以尊严的只有这样的职业，在从事这种职业时我们不是作为奴隶般的工具，而是在自己的领域内独立地进行创造；这种职业不需要有不体面的行动（哪怕只是表面上不体面的行动），甚至最优秀的人物也会怀着崇高的自豪感去从事它。最合乎这些要求的职业，并不总是最高的职业，但往往是最可取的职业。</p><p>但是，正如有失尊严的职业会贬低我们一样，那种建立在我们后来认为是错误的思想上的职业也一定会成为我们的沉重负担。</p><p>这里，我们除了自我欺骗，别无解救办法，而让人自我欺骗的解救办法是多么令人失望啊！</p><p>那些主要不是干预生活本身，而是从事抽象真理的研究的职业，对于还没有确立坚定的原则和牢固的、不可动摇的信念的青年是最危险的，当然，如果这些职业在我们心里深深地扎下了根，如果我们能够为它们的主导思想而牺牲生命、竭尽全力，这些职业看来还是最高尚的。</p><p>这些职业能够使具有合适才干的人幸福，但是也会使那些不经考虑、凭一时冲动而贸然从事的人毁灭。</p><p>相反，重视作为我们职业的基础的思想，会使我们在社会上占有较高的地位，提高我们自己的尊严，使我们的行为不可动摇。</p><p>一个选择了自己所珍视的职业的人，一想到他可能不称职时就会战战兢兢──这种人单是因为他在社会上所处的地位是高尚的，他也就会使自己的行为保持高尚。</p><p>在选择职业时，我们应该遵守的主要指针是人类的幸福和我们自身的完美。不应认为，这两种利益会彼此敌对、互相冲突，一种利益必定消灭另一种利益；相反，人的本性是这样的：人只有为同时代人的完美、为他们的幸福而工作，自己才能达到完美。</p><p>如果一个人只为自己劳动，他也许能够成为著名的学者、伟大的哲人、卓越的诗人，然而他永远不能成为完美的、真正伟大的人物。</p><p>历史把那些为共同目标工作因而自己变得高尚的人称为最伟大的人物；经验赞美那些为大多数人带来幸福的人是最幸福的人；宗教本身也教诲我们，人人敬仰的典范，就曾为人类而牺牲自己──有谁敢否定这类教诲呢？</p><p>如果我们选择了最能为人类而工作的职业，那么，重担就不能把我们压倒，因为这是为大家作出的牺牲；那时我们所享受的就不是可怜的、有限的、自私的乐趣，我们的幸福将属于千百万人，我们的事业将悄然无声地存在下去，但是它会永远发挥作用，而面对我们的骨灰，高尚的人们将洒下热泪。</p><h1 id="读后总结"><a href="#读后总结" class="headerlink" title="读后总结"></a>读后总结</h1><p>这篇文章马克思写于1835年，当时他只有17岁，和今天我们高中毕业的年纪差不多大，但从文章中可以看出他缜密的逻辑思维，令22岁的我自叹不如。</p><p>首先，马克思以青年为主体，以青年的内在精神层面出发，指出我们应该选择能够使我们充满热情的职业；而后提到虚荣心、自我欺骗、幻想对选择职业的影响。反观当今的大学生，很多人和我一样，充满着迷茫，这种迷茫不仅仅是不知道从事什么职业的迷茫，更是在思想、信仰、精神上的迷茫。我们的教育好像从来没有教过我们去成为自己，而是以榜样为目标，不断地学习别人，向别人家的孩子靠近，自己的概念很薄弱。深夜，当世界陷入寂静中时，当我们放下手机电脑，脱掉装饰在我们身上的衣服的时候，问一句，我是谁？</p><p>马克思提到的热情，我曾经有过吗？我想是有过的，对于某件事的热情，对于某个物品的热情，但这些不是马克思所指的热情，不是持久的、能让我为之不懈努力、能够为我摒除万难的热情。我的热情在哪里？这是我需要寻找的，也是我们需要寻找的。在经济高速发展的时期，人与人之间的物质财富差距迅速拉大，这让我们无法不注意到周围人的光鲜或惨淡，人与人之间的互相攀比心理也多了起来。在互相比较的过程中，我们是否丢失了自己呢？</p><p>虚荣、幻想、自我欺骗，这三者经常出现。为了得到更多的金钱，欺骗自己喜欢高薪的职业，而自己是否喜欢、是否擅长倒成了次要的；为了得到别人羡慕的目光，购买一些自己并不需要的物品，来满足自己的虚荣心，这样值得吗。我们太容易想到功成名就、衣锦还乡后的风光，而对于眼下的艰难困苦却难以忍受，在幻想中打败不喜欢的一切，幻想有什么意义呢？</p><p>在认清了我们内心的方向之后，马克思谈到了人的外在限制。首先就是身体的限制，使我们无法从事一些对于身体有要求的职业，譬如视力要求、身高的要求等；但这里强调的还是一个健康的身体，如果没有健康的身体，那么我们将永远忍受内在精神与外在体魄的矛盾冲突，而我们的教育中对于学生体质的锻炼是非常缺乏的，对于体育爱好的培养则更是相当于没有。诚然，我们需要更多的科技工作者，高素质人才，但知识的积累需要时间作为支撑，不能让人才英年早逝，也不能等人民病重之时再去想办法延长生命。私以为，应当对体育锻炼和居民健康医疗之间做充分的研究，把钱投资到医疗和锻炼两者中的哪一个收效更高呢？</p><p>除了身体的限制，我们还受到父母、社会关系、经济的限制，马克思出身于富贵家庭，所以他在职业选择上有更大的自由。这个也是我们要考虑的问题，而且很大程度上是我们选择的限制。</p><p>最后，讨论作为客体的职业，它应该为我们带来什么呢？马克思说，如果我们能在最大限度上选择职业，那么我们应当选择最能为人类工作，同时又能使自己臻于完美的职业。要考虑到职业背后的思想，选择正确的思想，这是什么意思呢？我觉得是说要为正确的思想而工作，譬如恐怖主义就是不正确的、反人类的思想，我们的职业当然不能建立在这样的思想之上。</p><p>这篇文章约两百年的文章读来仍收获颇多，有价值的思想永生不灭！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马克思 </tag>
            
            <tag> 职业选择 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一首小诗</title>
      <link href="/post/46d5f113.html"/>
      <url>/post/46d5f113.html</url>
      
        <content type="html"><![CDATA[<p>打草机的声音嗡嗡作响<br>空气中夹杂着泥土和草的气息<br>偶尔一阵风吹来<br>淡淡的花香飘过<br>我想，那是你<br>又希望那不是你</p><p>远处的群山连绵起伏<br>在蔚蓝色的天空的衬托下形成一道分界线<br>万里无云的日子里<br>太阳毫无保留地洒向大地<br>我想，那是你<br>又希望那不是你</p><p>人群穿梭不息<br>向着我或是离开我<br>当这城市又一次陷入寂静中时<br>回想那人群中的身影<br>我想，向着我的是你<br>又希望离开我的不是你</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思念 </tag>
            
            <tag> 爱情 </tag>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法在hexo博客下的测试</title>
      <link href="/post/3289b53b.html"/>
      <url>/post/3289b53b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-标题测试"><a href="#1-标题测试" class="headerlink" title="1. 标题测试"></a>1. 标题测试</h1><blockquote><p>markdown标题格式：# 这是文章标题</p></blockquote><p>  用#号表示标题，后接一个<strong>空格</strong>，多个#号依次为<strong>子标题</strong>，markdown支持六级标题，下面测试1-6个＃号。</p><ul><li><h4 id="书写格式："><a href="#书写格式：" class="headerlink" title="书写格式："></a><strong>书写格式：</strong></h4><p># 这是一级标题<br>## 这是二级标题<br>### 这是三级标题<br>#### 这是四级标题<br>##### 这是五级标题<br>###### 这是六级标题</p></li><li><h4 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果:"></a><strong>显示效果:</strong></h4><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6></li></ul><h1 id="2-引用"><a href="#2-引用" class="headerlink" title="2. 引用"></a>2. 引用</h1><blockquote><p>markdown引用格式：&gt;这是引用内容</p></blockquote><p>在整个段落前加&gt;即可将段落变为<strong>引用</strong>，引用可以嵌套使用，内层使用多个<strong>&gt;</strong>。</p><ul><li><h4 id="书写格式：-1"><a href="#书写格式：-1" class="headerlink" title="书写格式："></a><strong>书写格式：</strong></h4><p>&gt;这是一级引用<br>&gt;&gt;这是二级引用<br>&gt;&gt;&gt;这是三级引用<br>&gt;&gt;   (这一行的两个<strong>&gt;</strong>是必要的)<br>&gt;&gt;回到二级引用<br>&gt;    (这一行的两个<strong>&gt;</strong>是必要的)<br>&gt;回到一级引用</p></li><li><h4 id="显示效果-1"><a href="#显示效果-1" class="headerlink" title="显示效果:"></a><strong>显示效果:</strong></h4><blockquote><p>这是一级引用</p><blockquote><p>这是二级引用</p><blockquote><p>这是三级引用<br>  (这一行的两个<strong>&gt;</strong>是必要的)<br>回到二级引用<br>   (这一行的两个<strong>&gt;</strong>是必要的)<br>回到一级引用</p></blockquote></blockquote></blockquote><p>引用的块内也可以添加标题、列表、代码块等，如下：</p><blockquote><h5 id="这是引用内部的标题"><a href="#这是引用内部的标题" class="headerlink" title="这是引用内部的标题"></a>这是引用内部的标题</h5></blockquote></li></ul><h1 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h1><blockquote><p>markdown列表格式：- 无序列表 、* 无序列表 、+ 无序列表 、1. 有序列表。列表项目符号后面跟一个空格。</p></blockquote><ul><li><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a><strong>无序列表</strong></h4><ul><li>这是使用-号的无序列表</li></ul><ul><li>这是使用+号的无序列表</li></ul><ul><li>这是使用*号的无序列表</li></ul></li><li><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a><strong>有序列表</strong></h4><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol></li><li><h4 id="列表内引用"><a href="#列表内引用" class="headerlink" title="列表内引用"></a><strong>列表内引用</strong></h4><p>列表内引用时，&gt;要缩进，如下所示：</p><ul><li><strong>列表内引用示例：</strong><blockquote><p>此处的&gt;缩进了一个空格。</p></blockquote></li></ul></li><li><h4 id="列表的嵌套"><a href="#列表的嵌套" class="headerlink" title="列表的嵌套"></a><strong>列表的嵌套</strong></h4><p>列表的嵌套采用缩进，如下所示</p><ul><li>一级列表<ul><li>二级列表</li></ul></li></ul></li></ul><h1 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h1><p>将代码块放在两个```之间即可，可以选定一个语言标识符，然后就可以启用它为代码着色了，如下所示。也可以将整个代码块缩进四个空格或一个制表符。</p><ul><li><h4 id="书写格式：-2"><a href="#书写格式：-2" class="headerlink" title="书写格式："></a><strong>书写格式：</strong></h4>```ruby<br>require ‘redcarpet’<br>markdown = Redcarpet.new(“Hello World!”)<br>puts markdown.to_html<br>```</li><li><h4 id="显示效果："><a href="#显示效果：" class="headerlink" title="显示效果："></a><strong>显示效果：</strong></h4><pre class=" language-ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string">'redcarpet'</span>markdown <span class="token operator">=</span> <span class="token constant">Redcarpet</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span>puts markdown<span class="token punctuation">.</span>to_html</code></pre></li><li><h4 id="行内代码：将代码放在两个反引号-之间。如下所示："><a href="#行内代码：将代码放在两个反引号-之间。如下所示：" class="headerlink" title="行内代码：将代码放在两个反引号`之间。如下所示："></a><strong>行内代码：</strong>将代码放在两个反引号`之间。如下所示：</h4>这是一条行内代码<code>printf("Fuck World!")</code>。</li></ul><h1 id="5-强调"><a href="#5-强调" class="headerlink" title="5. 强调"></a>5. 强调</h1><blockquote><p>markdown语法中强调有加粗和斜体两种,斜体用两个*号或者_括起来，删除线用两个~括起来</p></blockquote><ul><li><h4 id="书写格式：-3"><a href="#书写格式：-3" class="headerlink" title="书写格式："></a><strong>书写格式：</strong></h4><p>*这是佳文的博客*<br>**这是佳文的博客**<br>~这是佳文的博客~<br>***这是佳文的博客***<br>~*这是佳文的博客*~<br>~**这是佳文的博客**~<br>~***这是佳文的博客***~</p></li><li><h4 id="显示效果：-1"><a href="#显示效果：-1" class="headerlink" title="显示效果："></a><strong>显示效果：</strong></h4><p><em>这是佳文的博客</em><br><strong>这是佳文的博客</strong><br><del>这是佳文的博客</del><br><strong><em>这是佳文的博客</em></strong><br><del><em>这是佳文的博客</em></del><br><del><strong>这是佳文的博客</strong></del><br><del><strong><em>这是佳文的博客</em></strong></del></p></li></ul><h1 id="6-自动链接"><a href="#6-自动链接" class="headerlink" title="6. 自动链接"></a>6. 自动链接</h1><blockquote><p>方括号里写文字，圆括号里放链接，markdown会把它自动转换成链接。</p></blockquote><ul><li><h4 id="书写格式：-4"><a href="#书写格式：-4" class="headerlink" title="书写格式："></a><strong>书写格式：</strong></h4><p>[百度](<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a>)</p></li><li><h4 id="显示效果：-2"><a href="#显示效果：-2" class="headerlink" title="显示效果："></a><strong>显示效果：</strong></h4><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p></li></ul><h1 id="7-表格"><a href="#7-表格" class="headerlink" title="7. 表格"></a>7. 表格</h1><blockquote><p>markdown中可以制作表格，第一行为表头，用|隔开，-表示文字居左，:-:表示文字居中，-:表示文字居右，不知道为何实现不了居中和居右。表格的头部和尾部最好保留一个换行和上下部分内容隔开，不然可能会出现显示不出来的情况。</p></blockquote><ul><li><h4 id="书写格式：-5"><a href="#书写格式：-5" class="headerlink" title="书写格式："></a><strong>书写格式：</strong></h4><p>First Header | Second Header | Third Header<br>------------ | ------------- | ------------<br>Content Cell | Content Cell  | Content Cell<br>Content Cell | Content Cell  | Content Cell</p></li><li><h4 id="显示效果：-3"><a href="#显示效果：-3" class="headerlink" title="显示效果："></a><strong>显示效果：</strong></h4><table><thead><tr><th>First Header</th><th>Second Header</th><th>Third Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr></tbody></table></li></ul><h1 id="8-分割线"><a href="#8-分割线" class="headerlink" title="8. 分割线"></a>8. 分割线</h1><blockquote><p>使用三个相连的下划线_来产生一个分割线</p></blockquote><p>分割线示例：<br>这是分割线以上</p><hr><p>这是分割线以下</p><h1 id="9-图片"><a href="#9-图片" class="headerlink" title="9. 图片"></a>9. 图片</h1><blockquote><p>Markdown 使用了类似链接的语法来插入图片</p></blockquote><h4 id="内联图片"><a href="#内联图片" class="headerlink" title="内联图片"></a>内联图片</h4><ul><li>一个惊叹号!</li><li>接着一个方括号，里面是图片的替代文字</li><li>接着一个普通括号，里面是图片的网址或本地地址，最后还可以用引号包住并加上选择性的title文字</li><li><h4 id="书写格式：-6"><a href="#书写格式：-6" class="headerlink" title="书写格式："></a><strong>书写格式：</strong></h4>![这是一张内联图片示例](/medias/myicon.jpg)</li><li><h4 id="显示效果：-4"><a href="#显示效果：-4" class="headerlink" title="显示效果："></a><strong>显示效果：</strong></h4><img src="/medias/myicon.jpg" alt="这是一张内联图片示例"></li></ul><h2 id="10-遇到的bug及解决方法-不定时更新"><a href="#10-遇到的bug及解决方法-不定时更新" class="headerlink" title="10. 遇到的bug及解决方法(不定时更新)"></a>10. 遇到的bug及解决方法(不定时更新)</h2><ol><li>尽量遵守标准的markdown语法，我觉得最坑的就是这个<strong>空格</strong>，有时候忘了加也不好看出来，但是会引起各种各样的bug。</li><li>表格目前没有实现居中居左居右，不知道是什么问题。</li><li>代办列表- [ ] 显示不出来，解决不了。</li><li>今天看到手机网页的无序列表的那个点会乱显示，又是一个bug。 </li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建心路历程</title>
      <link href="/post/b1b3145f.html"/>
      <url>/post/b1b3145f.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要搭建博客呢"><a href="#为什么要搭建博客呢" class="headerlink" title="为什么要搭建博客呢"></a>为什么要搭建博客呢</h1><p>古人二十弱冠，三十而立，相信很多二十出头的年轻人都有一些心慌，总觉得不应该和十几岁那样了，应该做点什么让自己变得更有价值。前几天刚过完二十二岁的生日，心里确实有些触动，有时候觉得自己很成熟，有时候又觉得很幼稚。我对于生活的要求并不高，吃饱喝足，然后做自己喜欢的事，偶尔能帮别人做点力所能及的事，就已经很开心了。</p><p>问题是，自己喜欢的事是什么？我还尚未找到自己的人生目标，所以每当看见身边的人为了他们的目标努力前行的时候，我都会羡慕不已。每次问自己这个问题，都会感到有些着急，看着同学们工作的工作，学习的发论文，参加比赛，来自同龄人的压力确实会让自己感到紧张。我的缺点是：总想着一切条件就绪了再去做事情，如果条件不满足，那先准备条件。所以导致很多事情会拖着，有的人连数学建模是什么都不知道，只是听到这个比赛的名字就愿意去参加，在过程中学习，我承认这是我比较难接受的。从某种角度来说，我很难开始一件事，但开始了就会全力以赴。</p><p>为什么搭建自己的博客呢？主要是想记录一下自己的生活和心情，遇到一些技术问题的话也记录一下，方便其他遇到同样问题的人，是的，帮助别人的快乐对我来说和自己解决问题的快乐相当。在其他平台上我也是个透明人，也想过在知乎、CSDN之类的平台写，但是一方面我既想记录生活，又想记录专业相关的技术问题，在任何一个平台上似乎都不太能满足；另一方面是写的东西要经过审查，有被删除的风险，相信没有人会愿意自己的努力付之一炬吧，所以选择了自己搭建博客。</p><h1 id="搭建博客的过程"><a href="#搭建博客的过程" class="headerlink" title="搭建博客的过程"></a>搭建博客的过程</h1><p>搭建博客对我来说是个完全陌生的过程，但也不算特别困难，毕竟专业和计算机还是有一定关联，编程知识也懂得一些，就是不懂Git的命令和操作，简单学了一下。对于对编程、命令行、计算机常识不熟悉的人，如果想自己搭建博客还是有一定难度的。下面就总结一下我自己的一点心得体会，主要是针对像我这样的同胞。</p><p>首先应该明确我们的问题是：<strong>搭建博客</strong>，所以要去搜索有哪些搭建博客的方法或模板，这里我选择的是hexo+githubpages的方法。然后还是以搭建博客为主，一定是先看<strong>官方文档</strong>，去找hexo博客官方网站，去看<strong>官方教程</strong>。</p><p>为什么呢，虽然我们会搜到很多博主的博客搭建方法，冠以<strong>小白、零基础</strong>之类的关键词，但是对于不同的人而言，博主并不知道你到底有多少基础，在我看来，起码你要知道计算机的一些基本操作，知道命令行操作方法，会看一点程序比较好，如果是完全不懂这些，那确实需要花大量时间。即使你拥有一定的基础，我还是不建议你直接去看博主的总结，因为博主搭建过程遇到的问题不一定都记录下来了，你遇到的问题可能和他不一样，如果按照他的步骤来却得不到相同的结果，然后再去查为什么，这回浪费很多的时间；而官方教程出问题的可能性很小，出现问题再仔细看看教程，很可能是自己的操作问题。先按官方教程搭建完，再去解决你想个性化的部分，去查询博客，会节省很多时间。</p><p>所以我的建议就是：</p><blockquote><p>先看<strong>官方教程</strong>，再看博主文章！</p></blockquote><p>然后我会在友情链接里放一些觉得还不错的博主的链接，还有我修改时借鉴到的博主，感谢他们的努力，OSU！</p><h1 id="搭建博客的心得"><a href="#搭建博客的心得" class="headerlink" title="搭建博客的心得"></a>搭建博客的心得</h1><p>在一段时间里做一件事对我来说是比较容易的，如果突然有很多事情堆在手里，我会不知所措。所以对于我来说，在一段时间了，最好不要同时做很多件事。而生活是一个又一个琐碎的小事组成的，这让我感到很烦闷，同时，计划被打乱也让我有些不开心。前段时间说要学习Python，连续看了可能有一个月的时间，有那么几天没看，于是就抛掷脑后了，唉！</p><p>搭建博客前前后后花了有两周吧， 利用周末和零散的时间，还是要学会管理时间，对于问题有大概的把握，知道自己多久能搞定，合理规划一下时间。总之，今天博客已经初具雏形，可以专注于内容的创作了，挺开心的。最后，在友情链接里贴上几个大佬的链接，感谢他们的努力和记录，帮助了我。</p><h1 id="后记-12-24"><a href="#后记-12-24" class="headerlink" title="后记(12.24)"></a>后记(12.24)</h1><p>今天思考博客该写些什么内容，前面写的几篇估计没什么人会看，也没有什么价值，也没有什么深度。想有人来访问，又不想有人知道我，这种心理有点奇怪，就好像发朋友圈似的。猜想可能是因为记录了一些自己内心的想法，怕被认识的人拿去无端揣摩；又觉得自己写的还有点意思，希望有人来看。</p><p>所以，从内容上来看，如果记录自己内心和想法的文章，大可随意一点，事事都严谨是很累の呢，这部分就作为个人网站的个人记录吧；除此之外，关于技术类的文章，想要一次做到尽善尽美也不大可能，初次上传时尽量保证正确性，然后不定时地去更新它，不断地臻于完美吧。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客样式更新记录</title>
      <link href="/post/53b0c153.html"/>
      <url>/post/53b0c153.html</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一篇博客"><a href="#这是我的第一篇博客" class="headerlink" title="这是我的第一篇博客"></a>这是我的第一篇博客</h1><blockquote><p>前前后后折腾了有一个月把，终于把博客搭的差不多了，接下来着重生产内容。<br>主要记录自己的生活状态，心情，学习的心得。<br>如果你也想通过githubpages+hexo搭建个人专属博客，请参考我的友情链接里的前三位，他们都写了详尽的搭建教程。</p></blockquote><h1 id="博客修改目标-未完成"><a href="#博客修改目标-未完成" class="headerlink" title="博客修改目标(未完成)"></a>博客修改目标(未完成)</h1><blockquote><p>找一些自己喜欢的清晰的图片替代主页的背景<br>代码和数学公式的支持</p></blockquote><h1 id="博客修改记录-已完成"><a href="#博客修改记录-已完成" class="headerlink" title="博客修改记录(已完成)"></a>博客修改记录(已完成)</h1><blockquote><p>文章底部链接已经去掉<br>颜色已经改为紫色到玫瑰红的渐变了<br>加了四首音乐<br>更改了博客icon，加了推荐文章<br>修改了qq的链接，可以唤起TIM跟博主对话12.19<br>修改了url，主页下面的文章在新页面打开，不影响音乐播放12.20<br>加了一个动漫小姐姐hibiki 12.20<br>小小地改了一下动态标签栏 12.20<br>在阿里云整了个域名，感觉有点麻烦呢，还要上传身份证照片，花了挺久的。12.21<br>修改了主页的图片掩膜的透明度 12.21<br>增加了百度和谷歌收录，因为换了域名，现在的域名暂时搜不到，谷歌可以搜到之前github的域名，直接谷歌博客的名字也可以找到。现在就等待吧。12.21<br>博客没有备案，十天过去了百度也没收录，谷歌收录了github的域名，新申请的域名也收录了；百度爬虫不能爬取github的数据，加上可能会审查，收录速度确实比较慢12.30</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客更新记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
